// Code generated by 'go generate'; DO NOT EDIT.

package gui

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return nil
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modkernel32 = windows.NewLazySystemDLL("kernel32.dll")
	moduser32   = windows.NewLazySystemDLL("user32.dll")

	procGetModuleHandleW = modkernel32.NewProc("GetModuleHandleW")
	procMessageBoxExW    = moduser32.NewProc("MessageBoxExW")
	procRegisterClassExW = moduser32.NewProc("RegisterClassExW")
	procCreateWindowExW  = moduser32.NewProc("CreateWindowExW")
	procShowWindow       = moduser32.NewProc("ShowWindow")
	procUpdateWindow     = moduser32.NewProc("UpdateWindow")
	procDefWindowProcW   = moduser32.NewProc("DefWindowProcW")
	procGetMessageW      = moduser32.NewProc("GetMessageW")
	procTranslateMessage = moduser32.NewProc("TranslateMessage")
	procDispatchMessageW = moduser32.NewProc("DispatchMessageW")
	procPostQuitMessage  = moduser32.NewProc("PostQuitMessage")
)

func GetModuleHandle(modulename *uint16) (module windows.Handle, err error) {
	r0, _, e1 := syscall.Syscall(procGetModuleHandleW.Addr(), 1, uintptr(unsafe.Pointer(modulename)), 0, 0)
	module = windows.Handle(r0)
	if module == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func MessageBoxEx(window windows.Handle, text *uint16, caption *uint16, style uint32, languageID uint16) (id int32, err error) {
	r0, _, e1 := syscall.Syscall6(procMessageBoxExW.Addr(), 5, uintptr(window), uintptr(unsafe.Pointer(text)), uintptr(unsafe.Pointer(caption)), uintptr(style), uintptr(languageID), 0)
	id = int32(r0)
	if id == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func RegisterClassEx(class *WndClassEx) (atom Atom, err error) {
	r0, _, e1 := syscall.Syscall(procRegisterClassExW.Addr(), 1, uintptr(unsafe.Pointer(class)), 0, 0)
	atom = Atom(r0)
	if atom == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func CreateWindowEx(exStyle uint32, classname *uint16, windowname *uint16, style uint32, x int32, y int32, width int32, height int32, parent windows.Handle, menu windows.Handle, instance windows.Handle, lparam uintptr) (window windows.Handle, err error) {
	r0, _, e1 := syscall.Syscall12(procCreateWindowExW.Addr(), 12, uintptr(exStyle), uintptr(unsafe.Pointer(classname)), uintptr(unsafe.Pointer(windowname)), uintptr(style), uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(parent), uintptr(menu), uintptr(instance), uintptr(lparam))
	window = windows.Handle(r0)
	if window == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func ShowWindow(window windows.Handle, command int32) (err error) {
	r1, _, e1 := syscall.Syscall(procShowWindow.Addr(), 2, uintptr(window), uintptr(command), 0)
	if r1 != 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func UpdateWindow(window windows.Handle) (err error) {
	r1, _, e1 := syscall.Syscall(procUpdateWindow.Addr(), 1, uintptr(window), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func DefWindowProc(window windows.Handle, message uint32, wparam uintptr, lparam uintptr) (result uintptr, err error) {
	r0, _, e1 := syscall.Syscall6(procDefWindowProcW.Addr(), 4, uintptr(window), uintptr(message), uintptr(wparam), uintptr(lparam), 0, 0)
	result = uintptr(r0)
	if result == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func GetMessage(message *Msg, window windows.Handle, messageFilterMin uint32, messageFilterMax uint32) (result int32, err error) {
	r0, _, e1 := syscall.Syscall6(procGetMessageW.Addr(), 4, uintptr(unsafe.Pointer(message)), uintptr(window), uintptr(messageFilterMin), uintptr(messageFilterMax), 0, 0)
	result = int32(r0)
	if result == -1 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func TranslateMessage(message *Msg) (err error) {
	r1, _, e1 := syscall.Syscall(procTranslateMessage.Addr(), 1, uintptr(unsafe.Pointer(message)), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func DispatchMessage(message *Msg) (result uintptr, err error) {
	r0, _, e1 := syscall.Syscall(procDispatchMessageW.Addr(), 1, uintptr(unsafe.Pointer(message)), 0, 0)
	result = uintptr(r0)
	if result == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func PostQuitMessage(exitCode int32) {
	syscall.Syscall(procPostQuitMessage.Addr(), 1, uintptr(exitCode), 0, 0)
	return
}
